package bot

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"github.com/bketelsen/gcbot/database"
)

func hookHandler(w http.ResponseWriter, r *http.Request) {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}

	defer r.Body.Close()

	var ag AutoGenerated
	stringData := string(data[:r.ContentLength])

	log.Println(stringData)
	err = json.Unmarshal(data, &ag)

	//do something with that  new order
	tix := GTicketFromAuto(ag)
	err = database.SaveTickets(tix)
	if err != nil {
		log.Println("error saving from webhook", err.Error())
	}
	return
}

func GTicketFromAuto(a AutoGenerated) []*database.GTicket {
	var tix []*database.GTicket
	for _, item := range a.Details.Items {

		gt := &database.GTicket{}
		gt.OrderPlacedByLastName = item.ContactLastName
		gt.OrderPlacedByName = item.ContactFirstName
		gt.OrderPlacedByEmail = item.ContactEmail
		//gt.TicketPaid = item.TicketPaid
		gt.FirstName = item.RegistrationForm.FirstName
		gt.LastName = item.RegistrationForm.LastName
		gt.Company = item.RegistrationForm.Company
		gt.EmailAddress = item.RegistrationForm.Email
		gt.LedgerCode = item.LedgerCode
		gt.TicketType = item.TicketType
		gt.TicketNumber = fmt.Sprint(item.TicketID)
		gt.PromoCode = item.PromoCode
		tix = append(tix, gt)
	}
	return tix
}

type AutoGenerated struct {
	ID          string `json:"id"`
	AccountID   int    `json:"accountId"`
	EventID     int    `json:"eventId"`
	Timestamp   int64  `json:"timestamp"`
	URL         string `json:"url"`
	TriggerName string `json:"triggerName"`
	PromoCode   string `json:"promoCode"`
	Details     struct {
		Items []struct {
			ContactFirstName       string `json:"contactFirstName"`
			ContactLastName        string `json:"contactLastName"`
			ContactEmail           string `json:"contactEmail"`
			ManageRegistrationLink string `json:"manageRegistrationLink"`
			TicketPaid             int    `json:"ticketPaid"`
			Currency               string `json:"currency"`
			Validity               string `json:"validity"`
			Status                 string `json:"status"`
			Created                string `json:"created"`
			MagicLink              string `json:"magicLink"`
			TicketID               int    `json:"ticketId"`
			RegistrationForm       struct {
				RefundPolicy   string `json:"refund_policy"`
				FirstName      string `json:"firstName"`
				Country        string `json:"country"`
				LastName       string `json:"lastName"`
				TwitterHandle2 string `json:"twitter_handle_2"`
				Company        string `json:"company"`
				Title          string `json:"title"`
				Email          string `json:"email"`
			} `json:"registrationForm"`
			PaymentStatus string `json:"paymentStatus"`
			ContactName   string `json:"contactName"`
			Discount      int    `json:"discount"`

			PromoCode  string `json:"promoCode"`
			Invoice    bool   `json:"invoice"`
			LedgerCode string `json:"ledgerCode"`
			TicketType string `json:"ticketType"`
			Type       string `json:"type"`
		} `json:"items"`
		ContactFirstName string `json:"contactFirstName"`
		ContactLastName  string `json:"contactLastName"`
		ContactEmail     string `json:"contactEmail"`
		Currency         string `json:"currency"`
		Status           string `json:"status"`
		OrderID          int    `json:"orderId"`
		Amount           int    `json:"amount"`
		PaymentStatus    string `json:"paymentStatus"`
		ContactName      string `json:"contactName"`
		Last4            string `json:"last4"`
		PaidVia          string `json:"paidVia"`
		Discount         int    `json:"discount"`
		Invoice          bool   `json:"invoice"`
		Quantity         int    `json:"quantity"`
		Action           string `json:"action"`
	} `json:"details"`
	Type string `json:"type"`
}
